#!/usr/bin/env python3

import os
import re
import sys
import subprocess
import xml.etree.ElementTree

# Configures
remote_com = "ssh://minh.hoang@mod.lge.com:29411"
remote_manifest = "manifest/Daily/JL03RD030IC_17102408.xml"
pattern=r"(framework)|(application)|(Release)"
manifest_path = "jlr/qnx/manifest"

# clone manifest
if not os.path.exists("manifest/.git"):
    cmd = "git clone {0}/{1}".format(remote_com, manifest_path)
else:
    cmd = "git -C {0} pull".format("manifest")
    print("Pulling manifest file...")

subprocess.call(cmd, shell=True)

# get file xml
e = xml.etree.ElementTree.parse(remote_manifest).getroot()

# Processing
lst_name=[]
lst_path=[]
lst_revision=[]
for type in e.findall('project'):
    if not re.search(pattern, type.get('path')):
        continue
    proj_name = type.get('name')
    proj_path = type.get('path')
    proj_revision = type.get('revision')
    lst_name.append(proj_name)
    lst_path.append(proj_path)
    lst_revision.append(proj_revision)

    cmd = "git clone {0}/{1} {2}".format(remote_com, proj_name, proj_path)
    subprocess.call(cmd, shell=True)

for type in e.findall('project'):
    if not re.search(pattern, type.get('path')):
        continue
    proj_path = type.get('path')
    proj_revision = type.get('revision')

    print(proj_path + ": ")
    cmd = "git -C {0} checkout {1}".format(proj_path, proj_revision)
    subprocess.call(cmd, shell=True)

print("-------- xong.hehe --------")
